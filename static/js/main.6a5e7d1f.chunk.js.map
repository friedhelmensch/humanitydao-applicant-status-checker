{"version":3,"sources":["utils/getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","provider","web3","wrap","_context","prev","next","Web3","providers","HttpProvider","console","log","stop","this","formatStrWithYesNo","isYes","str","react_default","createElement","className","results","0","1","2","addressToEtherscanLink","address","href","concat","target","rel","txHashToEtherscanLink","txHash","App","state","accounts","humanityRegistryContract","humanityGovernanceContract","twitterHumanityApplicantContract","textToSearch","proposal","voteEvents","removeVoteEvents","applyEventsFromAddress","applyEventsFromProposalId","searchedAddress","isSearching","componentDidMount","sent","eth","getAccounts","Contract","HumanityRegistryJSON","abi","networks","HumanityGovernanceJSON","TwitterHumanityApplicantJSON","_this","setState","fetchProposalState","t0","alert","error","_callee2","_this$state","proposalIdStr","searchingAddress","_ref3","_ref4","amountInHex","amountWithDecimals","amount","_context2","utils","isAddress","getPastEvents","filter","applicant","fromBlock","length","returnValues","proposalId","all","methods","getProposal","call","slicedToArray","data","includes","proposedAddress","toChecksumAddress","replace","parseInt","handleProposalIdTextChange","event","value","trim","handleSearch","preventDefault","resultIdx","username","_this$state2","onSubmit","type","onChange","placeholder","role","map","key","toString","feeRecipient","moment","startTime","format","fromWei","yesCount","noCount","result","index","values","transactionHash","voter","approve","weight","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a5e7d1f.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // // Modern dapp browsers...\n      // if (window.ethereum) {\n      //   const web3 = new Web3(window.ethereum);\n      //   try {\n      //     // Request account access if needed\n      //     await window.ethereum.enable();\n      //     // Acccounts now exposed\n      //     resolve(web3);\n      //   } catch (error) {\n      //     reject(error);\n      //   }\n      // }\n      // // Legacy dapp browsers...\n      // else if (window.web3) {\n      //   // Use Mist/MetaMask's provider.\n      //   const web3 = window.web3;\n      //   console.log(\"Injected web3 detected.\");\n      //   resolve(web3);\n      // }\n      // // Fallback to localhost; use dev console port by default...\n      // else {\n        const provider = new Web3.providers.HttpProvider(\n          \"https://mainnet.infura.io/\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"Using infura's Ethereum API.\");\n        resolve(web3);\n      // }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport * as moment from \"moment\";\n\nimport HumanityRegistryJSON from \"./contracts/HumanityRegistry.json\";\nimport HumanityGovernanceJSON from \"./contracts/HumanityGovernance.json\";\nimport TwitterHumanityApplicantJSON from \"./contracts/TwitterHumanityApplicant.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport \"./App.css\";\n\nconst boolToYesNo = isYes => {\n  if (isYes) {\n    return <span className=\"text-success\">Yes</span>;\n  } else {\n    return <span className=\"text-danger\">No</span>;\n  }\n};\n\nconst formatStrWithYesNo = (isYes, str) => {\n  if (isYes) {\n    return <span className=\"text-success\">{str}</span>;\n  } else {\n    return <span className=\"text-danger\">{str}</span>;\n  }\n};\n\nconst results = {\n  0: <span className=\"text-info\">Pending</span>,\n  1: <span className=\"text-success\">Yes</span>,\n  2: <span className=\"text-danger\">No</span>\n};\nconst resultIdxToString = resultIdx => {\n  return results[resultIdx];\n};\n\nconst addressToEtherscanLink = address => {\n  return (\n    <a\n      href={`https://etherscan.io/address/${address}`}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {address}\n    </a>\n  );\n};\n\nconst txHashToEtherscanLink = txHash => {\n  // const shortenTxHash = `${txHash.substring(0, 8)}...`\n  return (\n    <a\n      href={`https://etherscan.io/tx/${txHash}`}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {txHash}\n    </a>\n  );\n};\n\nconst twitterUsernameToLink = username => {\n  return (\n    <a\n      href={`https://twitter.com/${username}`}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      @{username}\n    </a>\n  );\n};\n\nclass App extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    humanityRegistryContract: null,\n    humanityGovernanceContract: null,\n    twitterHumanityApplicantContract: null,\n    textToSearch: \"\",\n    proposal: null,\n    voteEvents: [],\n    removeVoteEvents: [],\n    applyEventsFromAddress: [],\n    applyEventsFromProposalId: [],\n    searchedAddress: \"\",\n    isSearching: false\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      const mainnetNetworkId = 1;\n      const humanityRegistryContract = new web3.eth.Contract(\n        HumanityRegistryJSON.abi,\n        HumanityRegistryJSON.networks[mainnetNetworkId].address\n      );\n      const humanityGovernanceContract = new web3.eth.Contract(\n        HumanityGovernanceJSON.abi,\n        HumanityGovernanceJSON.networks[mainnetNetworkId].address\n      );\n      const twitterHumanityApplicantContract = new web3.eth.Contract(\n        TwitterHumanityApplicantJSON.abi,\n        TwitterHumanityApplicantJSON.networks[mainnetNetworkId].address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      await this.setState({\n        web3,\n        accounts,\n        humanityRegistryContract,\n        humanityGovernanceContract,\n        twitterHumanityApplicantContract\n      });\n      this.fetchProposalState(\"136\");\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  fetchProposalState = async textToSearch => {\n    const {\n      web3,\n      // humanityRegistryContract,\n      humanityGovernanceContract,\n      twitterHumanityApplicantContract\n    } = this.state;\n\n    this.setState({ isSearching: true });\n\n    try {\n      let proposalIdStr = textToSearch;\n\n      if (web3.utils.isAddress(textToSearch)) {\n        const searchingAddress = textToSearch;\n\n        const applyEventsFromAddress = await twitterHumanityApplicantContract.getPastEvents(\n          \"Apply\",\n          {\n            filter: {\n              applicant: searchingAddress\n            },\n            fromBlock: 7723946\n          }\n        );\n        console.log(\"applyEventsFromAddress\", applyEventsFromAddress);\n        this.setState({\n          searchingAddress,\n          applyEventsFromAddress\n        });\n\n        if (applyEventsFromAddress.length > 0) {\n          proposalIdStr =\n            applyEventsFromAddress[applyEventsFromAddress.length - 1]\n              .returnValues.proposalId;\n        }\n      } else {\n        this.setState({\n          searchingAddress: \"\",\n          applyEventsFromAddress: []\n        });\n      }\n\n      const [\n        proposal,\n        voteEvents,\n        removeVoteEvents,\n        applyEventsFromProposalId\n      ] = await Promise.all([\n        humanityGovernanceContract.methods.getProposal(proposalIdStr).call(),\n        humanityGovernanceContract.getPastEvents(\"Vote\", {\n          filter: {\n            proposalId: proposalIdStr\n          },\n          fromBlock: 7723872\n        }),\n        humanityGovernanceContract.getPastEvents(\"RemoveVote\", {\n          filter: {\n            proposalId: proposalIdStr\n          },\n          fromBlock: 7723872\n        }),\n        twitterHumanityApplicantContract.getPastEvents(\"Apply\", {\n          filter: {\n            proposalId: proposalIdStr\n          },\n          fromBlock: 7723946\n        })\n      ]);\n      proposal.proposalIdStr = proposalIdStr;\n      // Add function\n      if (proposal.data.includes(\"0a3b0a4f\")) {\n        proposal.proposedAddress = web3.utils.toChecksumAddress(\n          proposal.data.replace(\"0x0a3b0a4f000000000000000000000000\", \"0x\")\n        );\n      } else if(proposal.data.includes(\"10bf5068\")){\n        const amountInHex = proposal.data.replace(\"0x10bf50680000000000000000000000000000000000000000000000\", \"0x\");\n        const amountWithDecimals = parseInt(amountInHex);\n        const amount = amountWithDecimals / 1e18;\n        proposal.amount = amount\n      }\n\n      console.log(\"proposal\", proposal);\n      console.log(\"voteEvents\", voteEvents);\n      console.log(\"removeVoteEvents\", removeVoteEvents);\n      console.log(\"applyEventsFromProposalId\", applyEventsFromProposalId);\n\n      this.setState({\n        isSearching: false,\n        proposal,\n        voteEvents,\n        removeVoteEvents,\n        applyEventsFromProposalId\n      });\n    } catch (error) {\n      console.error(error);\n      alert(\"Wrong Proposal ID or Address.\");\n      this.setState({ isSearching: false });\n    }\n  };\n\n  handleProposalIdTextChange = event => {\n    this.setState({ textToSearch: event.target.value.trim() });\n  };\n\n  handleSearch = event => {\n    event.preventDefault();\n    this.fetchProposalState(this.state.textToSearch);\n  };\n\n  render() {\n    const {\n      web3,\n      applyEventsFromAddress,\n      // searchingAddress,\n      proposal,\n      voteEvents,\n      removeVoteEvents,\n      applyEventsFromProposalId,\n      isSearching\n    } = this.state;\n\n    if (!web3) {\n      return (\n        <div className=\"text-center pt-5\">\n          <div className=\"spinner-grow\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar justify-content-start navbar-light bg-light\">\n          <span className=\"navbar-brand mb-0 h1\">\n            HumanityDAO Applicant Status Checker\n          </span>\n          <a\n            className=\"nav-link\"\n            href=\"https://humanitydao.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Humanity\n          </a>\n          <a\n            className=\"nav-link\"\n            href=\"https://discord.gg/yvUqPUn\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Discord\n          </a>\n        </nav>\n\n        <div className=\"container pt-3 pb-3\">\n          <form\n            onSubmit={this.handleSearch}\n            className=\"form-inline justify-content-center mb-5\"\n          >\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={this.state.textToSearch}\n              onChange={this.handleProposalIdTextChange}\n              placeholder=\"Proposal ID or Address\"\n            />\n            <input type=\"submit\" className=\"btn btn-primary\" value=\"Search\" />\n          </form>\n\n          {isSearching && (\n            <div className=\"text-center\">\n              <div className=\"spinner-grow\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>\n            </div>\n          )}\n\n          {applyEventsFromAddress.length > 0 && (\n            <div className=\"mb-5\">\n              <div className=\"section-title\">Proposals from Address</div>\n              <div>\n                {applyEventsFromAddress.map(event => {\n                  return (\n                    <span\n                      key={\"apply-\" + event.returnValues.proposalId.toString()}\n                    >\n                      #{event.returnValues.proposalId.toString()}{\" \"}\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {proposal && (\n            <div className=\"mb-5\">\n              <div className=\"section-title\">Proposal</div>\n              <table className=\"table table-bordered\">\n                <tbody>\n                  <tr>\n                    <td className=\"bg-gray\">Proposal ID</td>\n                    <td>{proposal.proposalIdStr.toString()}</td>\n                  </tr>\n                  <tr>\n                    <td className=\"bg-gray\">Proposer</td>\n                    <td className=\"td-address\">\n                      {addressToEtherscanLink(proposal.feeRecipient)}\n                    </td>\n                  </tr>\n                  {proposal.proposedAddress ? (\n                    <tr>\n                      <td className=\"bg-gray\">Address</td>\n                      <td className=\"td-address\">\n                        {addressToEtherscanLink(proposal.proposedAddress)}\n                      </td>\n                    </tr>\n                  ) : (\n                    <tr>\n                      <td className=\"bg-gray\">Proposed new fee</td>\n                      <td className=\"td-address\">\n                        {proposal.amount}\n                      </td>\n                    </tr>\n                  )}\n                  {proposal.proposedAddress ? (\n                    <tr>\n                      <td className=\"bg-gray\">Twitter</td>\n                      <td>\n                        {twitterUsernameToLink(\n                          applyEventsFromProposalId[0].returnValues.username\n                        )}\n                      </td>\n                    </tr>\n                  ) : (\n                    <tr />\n                  )}\n\n                  <tr>\n                    <td className=\"bg-gray\">Starting Time</td>\n                    <td>\n                      {moment\n                        .unix(parseInt(proposal.startTime))\n                        .format(\"MMM DD YYYY HH:mm:ss Z\")}\n                    </td>\n                    {/* <td>{ (new Date(parseInt(proposal.startTime) * 1000)).toISOString() }</td> */}\n                  </tr>\n                  <tr>\n                    <td className=\"bg-gray\">Votes (Yes / No)</td>\n                    <td>\n                      {formatStrWithYesNo(\n                        true,\n                        web3.utils.fromWei(proposal.yesCount.toString())\n                      )}{\" \"}\n                      /{\" \"}\n                      {formatStrWithYesNo(\n                        false,\n                        web3.utils.fromWei(proposal.noCount.toString())\n                      )}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className=\"bg-gray\">Result</td>\n                    <td>{resultIdxToString(proposal.result)}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          )}\n\n          {voteEvents.length > 0 && (\n            <div className=\"mb-5\">\n              <div className=\"section-title\">Vote Events</div>\n              <table className=\"table table-bordered\">\n                <thead className=\"thead-light\">\n                  <tr>\n                    <th>TX</th>\n                    <th>Voter</th>\n                    <th>Voted for</th>\n                    <th>Weight</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {voteEvents.map((event, index) => {\n                    const values = event.returnValues;\n                    return (\n                      <tr key={\"vote-event-\" + index}>\n                        <td className=\"td-tx\">\n                          {txHashToEtherscanLink(event.transactionHash)}\n                        </td>\n                        {/* <td>{ moment.unix(parseInt(event.startTime)).format('MMM DD YYYY HH:mm:ss Z') }</td> */}\n                        <td className=\"td-address\">\n                          {addressToEtherscanLink(values.voter)}\n                        </td>\n                        <td>{boolToYesNo(values.approve)}</td>\n                        <td>\n                          {formatStrWithYesNo(\n                            values.approve,\n                            web3.utils.fromWei(values.weight.toString())\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          )}\n\n          {removeVoteEvents.length > 0 && (\n            <div className=\"mb-5\">\n              <div className=\"section-title\">RemoveVote Events</div>\n              <table className=\"table table-bordered\">\n                <thead className=\"thead-light\">\n                  <tr>\n                    <th>TX</th>\n                    <th>Voter</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {removeVoteEvents.map((event, index) => {\n                    const values = event.returnValues;\n                    return (\n                      <tr key={\"vote-event-\" + index}>\n                        <td className=\"td-tx\">\n                          {txHashToEtherscanLink(event.transactionHash)}\n                        </td>\n                        <td className=\"td-address\">\n                          {addressToEtherscanLink(values.voter)}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n\n        <footer className=\"footer bg-light text-center\">\n          <div className=\"container\">\n            <div className=\"text-muted\">\n              <a\n                href=\"https://github.com/Roger-Wu/humanitydao-applicant-status-checker\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Source Code on GitHub\n              </a>\n            </div>\n            <div className=\"text-muted\">\n              Donate ETH or tokens:{\" \"}\n              {addressToEtherscanLink(\n                \"0x36fAa1e49fF125ac72ceae0d5a2E35bC9aDD6591\"\n              )}\n            </div>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}